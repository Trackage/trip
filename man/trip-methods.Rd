% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllMethod.R
\docType{methods}
\name{trip-methods}
\alias{[,trip,ANY,ANY,ANY-method}
\alias{[,trip-method}
\alias{[[<-,trip,ANY,missing-method}
\alias{trip}
\alias{trip,ANY,TimeOrderedRecords-method}
\alias{trip,SpatialPointsDataFrame,ANY-method}
\alias{trip,trip,ANY-method}
\alias{trip,trip,TimeOrderedRecords-method}
\alias{trip-methods}
\alias{trip<-}
\alias{trip<-,data.frame,character-method}
\title{Function to handle animal track data, organized as \code{"trip"}s}
\usage{
trip(obj, TORnames)

trip(obj) <- value

\S4method{[}{trip,ANY,ANY,ANY}(x, i, j, ..., drop = TRUE)
}
\arguments{
\item{obj}{A \code{\link[sp]{SpatialPointsDataFrame}}, or an object that can
be coerced to one, containing at least two columns with the DateTime and ID
data as per \code{TORnames}.  It can also be a \code{trip} object for
redefining \code{TORnames}.}

\item{TORnames}{Either a \code{TimeOrderedRecords} object, or a 2-element
character vector specifying the DateTime and ID column of \code{obj}}

\item{value}{A 4-element character vector specifying the X, Y, DateTime coordinates 
and ID of \code{obj}.}

\item{x}{trip object}

\item{i, j, \dots}{indices specifying elements to extract}

\item{drop}{unused but necessary for method consistency}
}
\value{
A trip object, with the usual slots of a
\code{\link[sp]{SpatialPointsDataFrame}} and the added
\code{TimeOrderedRecords}. For the most part this can be treated as a
\code{data.frame} with \code{Spatial} coordinates.
}
\description{
Create an object of class \code{"trip"}, extending the basic functionality
of \code{\link[sp]{SpatialPointsDataFrame}} by specifying the data columns
that define the "TimeOrdered" quality of the records.
}
\section{Methods}{


Most of the methods available are by virtue of the sp package.  Some, such
as \code{split.data.frame} have been added to SPDF so that trip has the same
functionality.

\describe{

\item{trip}{\code{signature(obj="SpatialPointsDataFrame",
TORnames="ANY")}}The main construction.

\item{trip}{\code{signature(obj="ANY", TORnames="TimeOrderedRecords")}:
create a \code{trip} object from a data frame.}

\item{trip}{\code{signature(obj="trip", TORnames="ANY")}: (Re)-create a
\code{trip} object using a character vector for \code{TORnames}.}

\item{trip}{\code{signature(obj="trip", TORnames="TimeOrderedRecords")}:
(re)-create a trip object using a \code{TimeOrderedRecords} object.}

}
}
\examples{


d <- data.frame(x=1:10, y=rnorm(10), tms=Sys.time() + 1:10, id=gl(2, 5))
coordinates(d) <- ~x+y
## this avoids complaints later, but these are not real track data (!)
proj4string(d) <- CRS("+proj=laea +ellps=sphere")
(tr <- trip(d, c("tms", "id")))

## don't want adehabitatMA to be loaded as a requirement here
\dontrun{
## a simple example with the common fixes required for basic track data

dat <- read.csv("trackfile.csv")
names(dat)  ## e.g. [1] "long" "lat" "seal" "date" "local" "lq"
library(sp)
coordinates(dat) <- c("long", "lat")

## date/times may be in a particular time zone, please check
dat$gmt <- as.POSIXct(strptime(paste(dat$date, dat$local),
                      "\%d-\%b-\%y \%H:\%M:\%S"), tz="GMT")

## if there are problems in the data, this will error
tr <- trip(dat, c("gmt", "seal"))

## the following code tries to fix common problems

## remove completely-duplicated rows
dat <- dat[!duplicated(dat), ]
## order the rows by seal, then by time
dat <- dat[order(dat$seal, dat$gmt), ]
## fudge duplicated times
dat$gmt <- adjust.duplicateTimes(dat$gmt, dat$seal)

## finally, convert to Spatial and create trip object
coordinates(dat) <- c("long", "lat")
tr <- trip(dat, c("gmt", "seal"))
}


\dontrun{
   if (require(adehabitatLT)) {
     data(porpoise)
     porpoise <- as.trip(porpoise)
     proj4string(porpoise) <- CRS("+proj=utm +zone=21 +ellps=WGS84 +units=m +no_defs")
     summary(porpoise)

   }


   ## extended example to check that our projection metadata is correct
   library(maptools)
   data(wrld_simpl)
   library(rgeos)
   library(raster)

   ## 3 degrees either side (for half a zone . . .)
   ext <- as(extent(spTransform(porpoise, CRS(proj4string(wrld_simpl)))) + 3, "SpatialPolygons")
   proj4string(ext) <- CRS(proj4string(wrld_simpl))
   ## crop to the buffered tracks, and project to its native CRS
   w <- spTransform(gIntersection(wrld_simpl[grep("United States", wrld_simpl$NAME), ], ext),
    CRS(proj4string(porpoise)))

   plot(w)
   lines(porpoise)
}
}
\seealso{
\code{\link{speedfilter}}, and \code{\link{tripGrid}} for simplistic
speed filtering and spatial time spent gridding.
}

