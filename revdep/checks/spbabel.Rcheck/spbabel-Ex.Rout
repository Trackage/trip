
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "spbabel"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "spbabel-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('spbabel')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("map_table")
> ### * map_table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: map_table
> ### Title: A decomposition of 'vector' map data structures to tables.
> ### Aliases: map_table
> 
> ### ** Examples
> 
> data(holey)
> spholey <- sp(holey)
> map_table(spholey)
$o
# A tibble: 3 × 2
  rownumber_    object_
       <int>      <chr>
1          1 qxJ4m36ONd
2          2 mkQxVES9xW
3          3 5nOhqxax1v

$b
# A tibble: 9 × 3
     object_    branch_ island_
       <chr>      <chr>   <lgl>
1 qxJ4m36ONd DLElZPXgSz    TRUE
2 qxJ4m36ONd YOWIGWbDTQ   FALSE
3 qxJ4m36ONd D1BpegtGPz   FALSE
4 qxJ4m36ONd 4sCuOpDVf2   FALSE
5 qxJ4m36ONd v0vuD31yW7    TRUE
6 qxJ4m36ONd ASyuUmShpi    TRUE
7 mkQxVES9xW odN2WXCzYL    TRUE
8 5nOhqxax1v Ovq9NniD5L    TRUE
9 5nOhqxax1v 8TwAjaSgBN   FALSE

$bXv
# A tibble: 50 × 3
      branch_ order_    vertex_
        <chr>  <int>      <chr>
1  DLElZPXgSz      1 9EEkUCFmoK
2  DLElZPXgSz      2 JecN5LIG9F
3  DLElZPXgSz      3 guZrKZeRRC
4  DLElZPXgSz      4 EdWz8r0f2D
5  DLElZPXgSz      5 9EEkUCFmoK
6  YOWIGWbDTQ      1 AIO8ooXZh7
7  YOWIGWbDTQ      2 MIuCFlGern
8  YOWIGWbDTQ      3 QLoqTCkUg1
9  YOWIGWbDTQ      4 BI5onAu1kE
10 YOWIGWbDTQ      5 AIO8ooXZh7
# ... with 40 more rows

$v
# A tibble: 27 × 3
      x_    y_    vertex_
   <dbl> <dbl>      <chr>
1      0     0 9EEkUCFmoK
2      0    19 JecN5LIG9F
3     46    19 guZrKZeRRC
4     46     0 EdWz8r0f2D
5      7     6 AIO8ooXZh7
6     13     6 MIuCFlGern
7     13    13 QLoqTCkUg1
8      7    13 BI5onAu1kE
9     18     1 r3BW2zduSu
10    24     1 V5DLEgpEx5
# ... with 17 more rows

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("map_table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("semap")
> ### * semap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: semap
> ### Title: "South-east" map data.
> ### Aliases: seatt semap
> 
> ### ** Examples
> 
> # recreate as sp object
> mp <- sp(semap, attr_tab = seatt, crs = "+proj=longlat +ellps=WGS84")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("semap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sp")
> ### * sp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sp
> ### Title: Convert from dplyr tbl form to Spatial*DataFrame.
> ### Aliases: sp sp.data.frame
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> semap1 <- semap  %>% dplyr::filter(y_ > -89.9999)
> sp_obj <- sp(semap1, attr_tab = seatt, crs = "+proj=longlat +ellps=WGS84")
> ## look, seamless Antarctica!
> ## library(rgdal); plot(spTransform(sp_obj, "+proj=laea +lat_0=-70"))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’

> nameEx("sptable")
> ### * sptable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sptable
> ### Title: Convert from sp package 'Spatial' classes to a table.
> ### Aliases: map_table.trip sptable sptable.SpatialLines
> ###   sptable.SpatialMultiPointsDataFrame sptable.SpatialPointsDataFrame
> ###   sptable.SpatialPolygons sptable<-
> 
> ### ** Examples
> 
> ## holey is a decomposed SpatialPolygonsDataFrame
> spdata <- sp(holey)
> library(sp)
> plot(spdata, col = rainbow(nrow(spdata), alpha = 0.4))
> points(holey$x_, holey$y_, cex = 4)
> holes <- subset(holey, !island_)
> ## add the points that only belong to holes
> points(holes$x_, holes$y_, pch = "+", cex = 2)
> 
> ## manipulate based on topology
> ## convert to not-holes
> notahole <- holes
> notahole$island_ <- TRUE
> #also convert to singular objects - note that this now means we have an overlapping pair of polys
> #because the door had a hole filled by another object
> notahole$object_ <- notahole$branch_
> plot(sp(notahole), add = TRUE, col = "red")
> 
> ## example using in-place modification with sptable<-
> library(maptools)
Checking rgeos availability: FALSE
 	Note: when rgeos is not available, polygon geometry 	computations in maptools depend on gpclib,
 	which has a restricted licence. It is disabled by default;
 	to enable gpclib, type gpclibPermit()
> data(wrld_simpl)
> spdata2 <- spdata
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> ## modify the geometry on this object without separating the vertices from the objects
> sptable(spdata2) <- sptable(spdata2) %>% mutate(x_ = x_ + 10, y_ = y_ + 5)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sptable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.513 0.068 2.736 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
